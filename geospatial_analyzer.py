#!/usr/bin/env python3
"""
Analyseur g√©ospatial complet pour les lev√©s topographiques b√©ninois
Exemple qui regroupe tout : intersection avec les 14 couches + visualisation
"""

import geopandas as gpd
import pandas as pd
from shapely.geometry import Polygon, Point
import matplotlib.pyplot as plt
import json
import os
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

class BeninGeospatialAnalyzer:
    """Analyseur g√©ospatial pour les lev√©s b√©ninois"""
    
    def __init__(self, couches_dir="couche/"):
        """
        Initialise l'analyseur
        
        Args:
            couches_dir: Dossier contenant les couches GeoJSON
        """
        self.couches_dir = Path(couches_dir)
        
        # Les 14 couches dans l'ordre du CSV de soumission
        self.couches_names = [
            'aif', 'air_proteges', 'dpl', 'dpm', 'enregistrement individuel',
            'litige', 'parcelles', 'restriction', 'tf_demembres', 'tf_en_cours',
            'tf_etat', 'titre_reconstitue', 'zone_inondable'
        ]
        
        print(f"üó∫Ô∏è Analyseur g√©ospatial initialis√©")
        print(f"üìÅ Dossier couches: {self.couches_dir}")
        print(f"üìä {len(self.couches_names)} couches √† analyser")
    
    def create_polygon_from_coordinates(self, coordinates):
        """
        Cr√©e un polygone √† partir des coordonn√©es
        
        Args:
            coordinates: Liste de dict [{"x": 433124.59, "y": 706444.25}, ...]
            
        Returns:
            Polygon Shapely
        """
        try:
            # Convertir en liste de tuples (x, y)
            points = [(coord["x"], coord["y"]) for coord in coordinates]
            
            # S'assurer que le polygone est ferm√©
            if points[0] != points[-1]:
                points.append(points[0])
            
            # Cr√©er le polygone
            polygon = Polygon(points)
            
            # V√©rifications
            if not polygon.is_valid:
                print("‚ö†Ô∏è Polygone invalide, tentative de correction...")
                polygon = polygon.buffer(0)  # Correction automatique
            
            print(f"‚úÖ Polygone cr√©√©:")
            print(f"   - {len(coordinates)} points")
            print(f"   - Surface: {polygon.area:.2f} m¬≤")
            print(f"   - P√©rim√®tre: {polygon.length:.2f} m")
            print(f"   - Valide: {polygon.is_valid}")
            
            return polygon
            
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation polygone: {e}")
            return None
    
    def analyze_single_layer(self, polygon, couche_name):
        """
        Analyse l'intersection avec une seule couche
        
        Args:
            polygon: Polygone Shapely du lev√©
            couche_name: Nom de la couche (ex: 'parcelles')
            
        Returns:
            Dict avec r√©sultats d√©taill√©s
        """
        couche_path = self.couches_dir / f"{couche_name}.geojson"
        
        result = {
            'couche': couche_name,
            'has_intersection': False,
            'intersecting_features': 0,
            'total_features': 0,
            'intersection_area': 0.0,
            'percentage_covered': 0.0,
            'status': 'NON',
            'error': None
        }
        
        try:
            # Charger la couche
            if not couche_path.exists():
                result['error'] = f"Fichier {couche_path} non trouv√©"
                return result
            
            gdf = gpd.read_file(couche_path)
            result['total_features'] = len(gdf)
            
            # V√©rifier les intersections
            intersections = gdf.geometry.intersects(polygon)
            intersecting_features = gdf[intersections]
            
            if len(intersecting_features) > 0:
                result['has_intersection'] = True
                result['intersecting_features'] = len(intersecting_features)
                result['status'] = 'OUI'
                
                # Calculer la surface d'intersection totale
                total_intersection_area = 0
                for _, feature in intersecting_features.iterrows():
                    intersection = polygon.intersection(feature.geometry)
                    if hasattr(intersection, 'area'):
                        total_intersection_area += intersection.area
                
                result['intersection_area'] = total_intersection_area
                result['percentage_covered'] = (total_intersection_area / polygon.area) * 100
            
            print(f"   {couche_name:20} | {result['status']:3} | {result['intersecting_features']:3} features | {result['percentage_covered']:5.1f}%")
            
        except Exception as e:
            result['error'] = str(e)
            print(f"   {couche_name:20} | ERR | Erreur: {e}")
        
        return result
    
    def analyze_all_intersections(self, coordinates):
        """
        Analyse compl√®te avec toutes les couches
        
        Args:
            coordinates: Liste de dict [{"x": 433124.59, "y": 706444.25}, ...]
            
        Returns:
            Dict avec tous les r√©sultats
        """
        print("\nüîç === ANALYSE G√âOSPATIALE COMPL√àTE ===")
        
        # 1. Cr√©er le polygone
        polygon = self.create_polygon_from_coordinates(coordinates)
        if polygon is None:
            return None
        
        # 2. Analyser chaque couche
        print(f"\nüìä Analyse des intersections:")
        print(f"{'Couche':20} | {'Int':3} | {'Features':8} | {'Couv.':5}")
        print("-" * 50)
        
        results = {
            'polygon_info': {
                'area': polygon.area,
                'perimeter': polygon.length,
                'centroid': {'x': polygon.centroid.x, 'y': polygon.centroid.y},
                'bounds': polygon.bounds
            },
            'intersections': {},
            'summary': {
                'total_intersections': 0,
                'intersecting_layers': []
            }
        }
        
        for couche_name in self.couches_names:
            layer_result = self.analyze_single_layer(polygon, couche_name)
            results['intersections'][couche_name] = layer_result
            
            if layer_result['has_intersection']:
                results['summary']['total_intersections'] += 1
                results['summary']['intersecting_layers'].append(couche_name)
        
        # 3. R√©sum√©
        print(f"\nüìã === R√âSUM√â ===")
        print(f"Surface du lev√©: {polygon.area:.2f} m¬≤ ({polygon.area/10000:.2f} ha)")
        print(f"Intersections trouv√©es: {results['summary']['total_intersections']}/13 couches")
        
        if results['summary']['intersecting_layers']:
            print(f"Couches intersect√©es:")
            for layer in results['summary']['intersecting_layers']:
                layer_result = results['intersections'][layer]
                print(f"  - {layer}: {layer_result['percentage_covered']:.1f}% du terrain")
        
        return results, polygon
    
    def generate_submission_row(self, coordinates, results):
        """
        G√©n√®re une ligne pour le fichier submission.csv
        
        Args:
            coordinates: Coordonn√©es originales
            results: R√©sultats de l'analyse
            
        Returns:
            Liste repr√©sentant une ligne CSV
        """
        # Coordonn√©es en JSON
        coord_json = json.dumps([{"x": coord["x"], "y": coord["y"]} for coord in coordinates])
        
        # Les 13 colonnes d'intersection dans l'ordre (sans 'enregistrement individuel' qui fait 14)
        intersection_values = []
        for couche_name in self.couches_names:
            if couche_name in results['intersections']:
                status = results['intersections'][couche_name]['status']
                intersection_values.append(status)
            else:
                intersection_values.append('')
        
        # Ligne compl√®te: nom_fichier + coordonn√©es + 13 intersections
        row = ["exemple_leve.jpg", coord_json] + intersection_values
        
        return row
    
    def visualize_analysis(self, coordinates, results, polygon, save_path="analysis_visualization.png"):
        """
        Visualise l'analyse g√©ospatiale
        
        Args:
            coordinates: Coordonn√©es originales
            results: R√©sultats de l'analyse
            polygon: Polygone Shapely
            save_path: Chemin de sauvegarde
        """
        print(f"\nüé® G√©n√©ration de la visualisation...")
        
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('Analyse G√©ospatiale du Lev√© Topographique', fontsize=16, fontweight='bold')
        
        # 1. Vue d'ensemble avec quelques couches importantes
        ax1 = axes[0, 0]
        
        # Charger et afficher quelques couches importantes
        important_layers = ['parcelles', 'zone_inondable', 'restriction']
        colors = ['lightblue', 'orange', 'red']
        
        for i, layer_name in enumerate(important_layers):
            layer_path = self.couches_dir / f"{layer_name}.geojson"
            if layer_path.exists():
                try:
                    gdf = gpd.read_file(layer_path)
                    # Filtrer autour du polygone pour la performance
                    bounds = polygon.bounds
                    buffer = 1000  # 1km de buffer
                    bbox = (bounds[0]-buffer, bounds[1]-buffer, bounds[2]+buffer, bounds[3]+buffer)
                    gdf_filtered = gdf.cx[bbox[0]:bbox[2], bbox[1]:bbox[3]]
                    
                    if not gdf_filtered.empty:
                        gdf_filtered.plot(ax=ax1, color=colors[i], alpha=0.3, 
                                        edgecolor='black', linewidth=0.5, label=layer_name)
                except Exception as e:
                    print(f"Erreur visualisation {layer_name}: {e}")
        
        # Afficher le lev√© en rouge
        gdf_leve = gpd.GeoDataFrame([1], geometry=[polygon])
        gdf_leve.plot(ax=ax1, color='red', alpha=0.8, edgecolor='darkred', linewidth=2)
        
        ax1.set_title('Vue d\'ensemble du lev√©')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # 2. Graphique des intersections
        ax2 = axes[0, 1]
        
        intersection_data = []
        layer_names = []
        for couche_name in self.couches_names:
            if couche_name in results['intersections']:
                layer_result = results['intersections'][couche_name]
                intersection_data.append(1 if layer_result['has_intersection'] else 0)
                layer_names.append(couche_name.replace('_', '\n'))
        
        bars = ax2.bar(range(len(intersection_data)), intersection_data, 
                      color=['green' if x == 1 else 'lightgray' for x in intersection_data])
        ax2.set_title('Intersections par couche')
        ax2.set_ylabel('Intersection (1=Oui, 0=Non)')
        ax2.set_xticks(range(len(layer_names)))
        ax2.set_xticklabels(layer_names, rotation=45, ha='right', fontsize=8)
        ax2.grid(True, alpha=0.3)
        
        # 3. D√©tails du polygone
        ax3 = axes[1, 0]
        
        # Coordonn√©es du polygone
        x_coords = [coord["x"] for coord in coordinates] + [coordinates[0]["x"]]
        y_coords = [coord["y"] for coord in coordinates] + [coordinates[0]["y"]]
        
        ax3.plot(x_coords, y_coords, 'ro-', linewidth=2, markersize=8)
        ax3.fill(x_coords, y_coords, alpha=0.3, color='red')
        
        # Annoter les points
        for i, coord in enumerate(coordinates):
            ax3.annotate(f'P{i+1}', (coord["x"], coord["y"]), 
                        xytext=(5, 5), textcoords='offset points', fontsize=10)
        
        ax3.set_title('D√©tail du polygone du lev√©')
        ax3.set_xlabel('X (UTM 31N)')
        ax3.set_ylabel('Y (UTM 31N)')
        ax3.grid(True, alpha=0.3)
        ax3.axis('equal')
        
        # 4. Statistiques
        ax4 = axes[1, 1]
        ax4.axis('off')
        
        stats_text = f"""
STATISTIQUES DU LEV√â

Surface: {polygon.area:.2f} m¬≤
        {polygon.area/10000:.4f} hectares

P√©rim√®tre: {polygon.length:.2f} m

Centro√Øde:
  X: {polygon.centroid.x:.2f}
  Y: {polygon.centroid.y:.2f}

INTERSECTIONS:
Total: {results['summary']['total_intersections']}/13 couches

Couches intersect√©es:
"""
        
        for layer in results['summary']['intersecting_layers']:
            layer_result = results['intersections'][layer]
            stats_text += f"‚Ä¢ {layer}: {layer_result['percentage_covered']:.1f}%\n"
        
        ax4.text(0.05, 0.95, stats_text, transform=ax4.transAxes, fontsize=10,
                verticalalignment='top', fontfamily='monospace',
                bbox=dict(boxstyle='round', facecolor='lightgray', alpha=0.8))
        
        plt.tight_layout()
        plt.savefig(save_path, dpi=300, bbox_inches='tight')
        print(f"‚úÖ Visualisation sauvegard√©e: {save_path}")
        plt.show()


def example_analysis():
    """Exemple d'utilisation compl√®te"""
    
    # Coordonn√©es d'exemple (tes coordonn√©es)
    coordinates = [
    {"x": 392930.09, "y": 699294.99},
    {"x": 392922.77, "y": 699270.66},
    {"x": 392919.76, "y": 699249.80},
    {"x": 392871.22, "y": 699271.92},
    {"x": 392873.34, "y": 699293.50},
    {"x": 392874.36, "y": 699299.80},
    {"x": 392915.99, "y": 699294.09},
    {"x": 392925.48, "y": 699293.90}
]
    
    print("üöÄ === EXEMPLE D'ANALYSE G√âOSPATIALE ===")
    print(f"üìç Coordonn√©es d'entr√©e: {len(coordinates)} points")
    for i, coord in enumerate(coordinates):
        print(f"   P{i+1}: X={coord['x']}, Y={coord['y']}")
    
    # Initialiser l'analyseur
    analyzer = BeninGeospatialAnalyzer()
    
    # Faire l'analyse compl√®te
    results, polygon = analyzer.analyze_all_intersections(coordinates)
    
    if results:
        # G√©n√©rer la ligne CSV
        csv_row = analyzer.generate_submission_row(coordinates, results)
        print(f"\nüìÑ Ligne CSV g√©n√©r√©e:")
        print(f"Longueur: {len(csv_row)} colonnes")
        print(f"Coordonn√©es: {csv_row[1][:50]}...")
        print(f"Intersections: {csv_row[2:]}")
        
        # Visualiser
        analyzer.visualize_analysis(coordinates, results, polygon)
        
        # Sauvegarder les r√©sultats d√©taill√©s
        with open("analysis_results.json", "w", encoding="utf-8") as f:
            # Convertir le polygone en coordonn√©es pour JSON
            results_json = results.copy()
            results_json['polygon_coords'] = coordinates
            json.dump(results_json, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ R√©sultats sauvegard√©s: analysis_results.json")
        
        return results, csv_row
    
    else:
        print("‚ùå √âchec de l'analyse")
        return None, None


if __name__ == "__main__":
    # Lancer l'exemple
    results, csv_row = example_analysis()
