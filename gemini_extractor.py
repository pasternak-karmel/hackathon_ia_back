#!/usr/bin/env python3
"""
Extracteur Gemini pour les coordonn√©es des lev√©s topographiques b√©ninois
Hackathon Foncier B√©nin 2025
"""

import json
import os
from pathlib import Path
from PIL import Image
import pandas as pd
from tqdm import tqdm
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class GeminiBeninExtractor:
    """Extracteur Gemini pour les lev√©s topographiques b√©ninois"""
    
    def __init__(self, api_key=None):
        """Initialise l'extracteur Gemini"""
        # Installer google-generativeai si n√©cessaire
        try:
            import google.generativeai as genai
            self.genai = genai
        except ImportError:
            logger.info("Installation de google-generativeai...")
            os.system("pip install google-generativeai")
            import google.generativeai as genai
            self.genai = genai
        
        # Configuration de l'API
        if api_key:
            self.api_key = api_key
        else:
            self.api_key = os.getenv('GEMINI_API_KEY')
            if not self.api_key:
                logger.error("‚ùå Cl√© API Gemini requise!")
                logger.error("1. Obtenez une cl√© gratuite: https://makersuite.google.com/app/apikey")
                logger.error("2. Exportez-la: export GEMINI_API_KEY='votre_cl√©'")
                raise ValueError("Cl√© API Gemini manquante")
        
        # Configurer Gemini
        self.genai.configure(api_key=self.api_key)
        self.model = self.genai.GenerativeModel('gemini-1.5-flash')
        
        logger.info("‚úÖ Gemini initialis√© avec succ√®s")
        
        # Param√®tres sp√©cifiques aux lev√©s b√©ninois
        self.benin_x_range = (390000, 430000)  # Coordonn√©es X plausibles
        self.benin_y_range = (650000, 1300000)  # Coordonn√©es Y plausibles
    
    def extract_coordinates_with_gemini(self, image_path):
        """Extrait les coordonn√©es avec Gemini Vision"""
        try:
            # Charger l'image
            img = Image.open(image_path)
            
            # Prompt sp√©cialis√© pour les lev√©s topographiques b√©ninois
            prompt = """Tu es un expert en lev√©s topographiques. Analyse cette image de lev√© topographique b√©ninois.

OBJECTIF: Extraire le tableau des coordonn√©es des bornes/points.

INSTRUCTIONS:
1. Trouve le tableau contenant les coordonn√©es des points (P1, P2, P3... ou B1, B2, B3...)
2. Chaque ligne contient: Num√©ro du point, Coordonn√©e X, Coordonn√©e Y
3. Les coordonn√©es X sont typiquement entre 390000-430000
4. Les coordonn√©es Y sont typiquement entre 650000-1300000
5. Ignore les autres informations (titre, surface, √©chelle, etc.)

FORMAT DE SORTIE REQUIS (JSON strict):
{
  "coordinates": [
    {"point": "P1", "x": 401234.56, "y": 712345.78},
    {"point": "P2", "x": 401456.78, "y": 712567.89}
  ]
}

R√àGLES IMPORTANTES:
- Retourne UNIQUEMENT le JSON, aucun autre texte
- Si aucune coordonn√©e trouv√©e: {"coordinates": []}
- V√©rifie que les coordonn√©es sont dans les plages attendues
- Conserve la pr√©cision d√©cimale si pr√©sente
- Nomme les points P1, P2, P3... dans l'ordre"""

            # Appel √† Gemini
            response = self.model.generate_content([prompt, img])
            content = response.text.strip()
            
            # Nettoyer la r√©ponse
            if content.startswith("```json"):
                content = content.replace("```json", "").replace("```", "").strip()
            elif content.startswith("```"):
                content = content.replace("```", "").strip()
            
            # Parser le JSON
            try:
                result = json.loads(content)
                coordinates = result.get("coordinates", [])
                
                # Valider les coordonn√©es
                valid_coordinates = []
                for coord in coordinates:
                    if self.validate_coordinate(coord):
                        valid_coordinates.append(coord)
                
                return {
                    'success': True,
                    'coordinates': valid_coordinates,
                    'num_points': len(valid_coordinates)
                }
                
            except json.JSONDecodeError as e:
                logger.warning(f"Erreur JSON pour {image_path}: {e}")
                return {
                    'success': False,
                    'coordinates': [],
                    'num_points': 0
                }
                
        except Exception as e:
            logger.error(f"Erreur Gemini pour {image_path}: {e}")
            return {
                'success': False,
                'coordinates': [],
                'num_points': 0,
                'error': str(e)
            }
    
    def validate_coordinate(self, coord):
        """Valide une coordonn√©e"""
        try:
            x = float(coord.get('x', 0))
            y = float(coord.get('y', 0))
            
            return (self.benin_x_range[0] <= x <= self.benin_x_range[1] and
                    self.benin_y_range[0] <= y <= self.benin_y_range[1])
        except (ValueError, TypeError):
            return False
    
    def process_batch(self, input_dir, output_file="submission.csv"):
        """Traite un lot d'images avec Gemini"""
        input_path = Path(input_dir)
        
        # Trouver les images
        image_extensions = {'.jpg', '.jpeg', '.png', '.tiff', '.tif'}
        image_files = [
            f for f in input_path.iterdir() 
            if f.suffix.lower() in image_extensions
        ]
        
        if not image_files:
            raise ValueError(f"Aucune image trouv√©e dans {input_dir}")
        
        logger.info(f"Traitement de {len(image_files)} images...")
        
        # Traiter chaque image
        results = []
        successful = 0
        
        for image_file in tqdm(image_files, desc="Extraction des coordonn√©es"):
            result = self.extract_coordinates_with_gemini(str(image_file))
            result['image_path'] = str(image_file)
            results.append(result)
            
            if result['success'] and result['num_points'] > 0:
                successful += 1
                logger.info(f"‚úÖ {image_file.name}: {result['num_points']} points extraits")
            else:
                logger.warning(f"‚ùå {image_file.name}: √©chec d'extraction")
        
        # G√©n√©rer le CSV
        self.generate_submission_csv(results, output_file)
        
        # Statistiques
        stats = {
            'total_images': len(image_files),
            'successful_extractions': successful,
            'success_rate': successful / len(image_files) * 100,
            'output_file': output_file
        }
        
        return stats
    
    def generate_submission_csv(self, results, output_file):
        """G√©n√®re le fichier submission.csv"""
        headers = [
            'Nom_du_lev√©', 'Coordonn√©es', 'aif', 'air_proteges', 'dpl', 'dpm',
            'enregistrement individuel', 'litige', 'parcelles', 'restriction',
            'tf_demembres', 'tf_en_cours', 'tf_etat', 'titre_reconstitue', 'zone_inondable'
        ]
        
        rows = []
        
        for result in results:
            image_name = Path(result['image_path']).name
            
            if result['success'] and result['coordinates']:
                # Formater les coordonn√©es en JSON
                coord_json = json.dumps([
                    {"x": coord['x'], "y": coord['y']} 
                    for coord in result['coordinates']
                ], separators=(',', ':'))
            else:
                coord_json = ""
            
            # Cr√©er la ligne (coordonn√©es + 13 colonnes vides pour les intersections)
            row = [image_name, coord_json] + [''] * 13
            rows.append(row)
        
        # Sauvegarder le CSV
        df = pd.DataFrame(rows, columns=headers)
        df.to_csv(output_file, sep=';', index=False)
        
        logger.info(f"Fichier submission.csv g√©n√©r√©: {output_file}")


def main():
    """Fonction principale"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Extraction des coordonn√©es des lev√©s b√©ninois')
    parser.add_argument('--input_dir', '-i', default='Testing Data', 
                       help='Dossier contenant les images de lev√©s')
    parser.add_argument('--output', '-o', default='submission.csv',
                       help='Fichier de sortie CSV')
    parser.add_argument('--api_key', '-k', 
                       help='Cl√© API Gemini (ou utilisez GEMINI_API_KEY)')
    
    args = parser.parse_args()
    
    try:
        # Initialiser l'extracteur Gemini
        extractor = GeminiBeninExtractor(api_key=args.api_key)
        
        # Traiter les images
        stats = extractor.process_batch(args.input_dir, args.output)
        
        print(f"\n‚úÖ Traitement termin√© avec succ√®s!")
        print(f"üìä Statistiques:")
        print(f"   - Images trait√©es: {stats['total_images']}")
        print(f"   - Extractions r√©ussies: {stats['successful_extractions']}")
        print(f"   - Taux de r√©ussite: {stats['success_rate']:.1f}%")
        print(f"üìÑ Fichier g√©n√©r√©: {stats['output_file']}")
        
    except Exception as e:
        logger.error(f"Erreur fatale: {str(e)}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())
